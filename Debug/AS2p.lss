
AS2p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4a  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a55  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e0  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	22 d0       	rcall	.+68     	; 0xe6 <main>
  a2:	7e c0       	rjmp	.+252    	; 0x1a0 <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <initGPIO>:

#define DISPLAY_LED PB7	// Display back light's LED is on Port B, pin 7.


int initGPIO(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	//Set up input output direction on Port B, C and G
	DDRB |= (1<<DISPLAY_LED);	// Set the display back light's IO pin an an output. Leave other bits as they were.
  ae:	84 e2       	ldi	r24, 0x24	; 36
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e2       	ldi	r18, 0x24	; 36
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	20 68       	ori	r18, 0x80	; 128
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	DDRC = 0b00000111;		// Set the direction of the IO pins on Port C to output on the 3 least significant bits and input on the 5 higher ones. 5 buttons and 3 LEDs.
  c0:	87 e2       	ldi	r24, 0x27	; 39
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	27 e0       	ldi	r18, 0x07	; 7
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	DDRG |= 0b00000011;		// set the direction of the IO pins on Port G's lower 2 bytes as output (LEDs 1 & 2). Leave the other bits as they were.
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	23 e3       	ldi	r18, 0x33	; 51
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	23 60       	ori	r18, 0x03	; 3
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	return(0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <main>:




int main(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	1f 92       	push	r1
  ec:	cd b7       	in	r28, 0x3d	; 61
	unsigned char temp ;		//Allocate memory for  temp
	
	temp = initGPIO();				//Set up the data direction register for both ports C and G
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	da df       	rcall	.-76     	; 0xa6 <initGPIO>
	
	while(1)
	{
			temp = PINC;			// Copy Input Port C register (PINC) to temp.
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	86 e2       	ldi	r24, 0x26	; 38
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	80 81       	ld	r24, Z
			temp &= 0b11111000;		// Prepare to turn off Port C LEDs
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 7f       	andi	r24, 0xF8	; 248
			
			if (temp & 0b10000000)
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	88 23       	and	r24, r24
				temp |= 0b00000100;		// Prepare to turn on Led5 if S5 is on
 108:	1c f4       	brge	.+6      	; 0x110 <main+0x2a>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	84 60       	ori	r24, 0x04	; 4
			if (temp & 0b01000000)
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	80 74       	andi	r24, 0x40	; 64
 118:	99 27       	eor	r25, r25
 11a:	89 2b       	or	r24, r25
				temp |= 0b00000010;		// Prepare to turn on Led4 if S4 is on
 11c:	19 f0       	breq	.+6      	; 0x124 <main+0x3e>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	82 60       	ori	r24, 0x02	; 2
			if (temp & 0b00100000)
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	80 72       	andi	r24, 0x20	; 32
 12c:	99 27       	eor	r25, r25
 12e:	89 2b       	or	r24, r25
				temp |= 0b00000001;		// Prepare to turn on Led3 if S3 is on			
 130:	19 f0       	breq	.+6      	; 0x138 <main+0x52>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	81 60       	ori	r24, 0x01	; 1
			PORTC = temp & 0b00000111;	// Copy the last 3 bits of temp to Port C to turn on the LEDs.
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	fc 01       	movw	r30, r24
			
			temp &= 0b11111000;		//Clear all LEDs so we do not turn on what we do not want
 142:	20 83       	st	Z, r18
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	88 7f       	andi	r24, 0xF8	; 248
			if (temp & 0b00010000)
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 71       	andi	r24, 0x10	; 16
 152:	99 27       	eor	r25, r25
 154:	89 2b       	or	r24, r25
				temp |= 0b00000010;		// Prepare to turn on Led2 if S1 is on
 156:	19 f0       	breq	.+6      	; 0x15e <main+0x78>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	82 60       	ori	r24, 0x02	; 2
			if (temp & 0b00001000)
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	88 70       	andi	r24, 0x08	; 8
 166:	99 27       	eor	r25, r25
 168:	89 2b       	or	r24, r25
				temp |= 0b00000001;		// Prepare to turn on Led1 if S1 is on			
 16a:	19 f0       	breq	.+6      	; 0x172 <main+0x8c>
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	81 60       	ori	r24, 0x01	; 1
			temp &= 0b00000011;		// Clear the upper bits of temp to then turn on only the 2 LEDs in the next line
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	83 70       	andi	r24, 0x03	; 3
			PORTG &= 0b11111100;	// Turn off the LEDs if they are on.
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	24 e3       	ldi	r18, 0x34	; 52
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	2c 7f       	andi	r18, 0xFC	; 252
 186:	fc 01       	movw	r30, r24
			PORTG |= temp;			// Copy the last 2 bits of temp to Port G to turn on the LEDs.
 188:	20 83       	st	Z, r18
 18a:	84 e3       	ldi	r24, 0x34	; 52
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	24 e3       	ldi	r18, 0x34	; 52
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	30 81       	ld	r19, Z
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	23 2b       	or	r18, r19
 19a:	fc 01       	movw	r30, r24
	}
 19c:	20 83       	st	Z, r18
 19e:	aa cf       	rjmp	.-172    	; 0xf4 <main+0xe>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
